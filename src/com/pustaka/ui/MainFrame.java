/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.pustaka.ui;

import com.pustaka.model.UserInternal;
import com.pustaka.model.UserSession;
import com.pustaka.provider.ApplicationContextProvider;
import com.pustaka.report.ReportOmzet;
import com.pustaka.report.ReportPenjualan;
import com.pustaka.report.ReportPiutang;
import com.pustaka.report.ReportProduk;
import com.pustaka.service.UserInternalService;
import java.awt.Frame;
import java.awt.Image;
import java.beans.PropertyVetoException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.SwingUtilities;
import org.springframework.context.ApplicationContext;

/**
 *
 * @author dwi
 */
public class MainFrame extends javax.swing.JFrame {
    
    private UserInternal userInternal;
    private UserInternalService userInternalService;
    private static MainFrame myInstance;
    static org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(MainFrame.class);
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        logger.info("== Constructing Main Frame ==");
        initComponents();
        setMenuLogout();
        callSpring();
        this.setLocationRelativeTo(null);
        this.setExtendedState(Frame.MAXIMIZED_BOTH);
//        mainDesktopPane.add(loginDialog);
//        loginDialog.setVisible(true);
        loginDialog.setSize(280, 210);
        loginDialog.setLocationRelativeTo(null);
        loginDialog.setVisible(true);
        loginDialog.setModal(true);
        loginDialog.setAlwaysOnTop(true);
        username.requestFocus();
        this.setState(Frame.ICONIFIED);
        
        JRootPane rootPane = SwingUtilities.getRootPane(buttonLogin);
        rootPane.setDefaultButton(buttonLogin);
        
        //set frame icon
        try {
            Image img = ImageIO.read(getClass().getResource("/resources/book.png"));
            this.setIconImage(img);
        } catch (Exception ex) {
            logger.error("ERROR = " + ex.getMessage());
        }
    }
    
    public static MainFrame getInstance(){
        if(myInstance == null){
            myInstance = new MainFrame();
        }
        return myInstance;
    }
    
    public void enableMenu(){
        masterMenuList.setEnabled(true);
        userMenuItem.setEnabled(true);
        transaksiMenuList.setEnabled(true);
        laporanMenuList.setEnabled(true);
    }
    
    private void callSpring(){
        ApplicationContextProvider appCtx = ApplicationContextProvider.getInstance();
        appCtx.getApplicationContext();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor. 
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginDialog = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        password = new javax.swing.JPasswordField();
        buttonLogin = new javax.swing.JButton();
        buttonBatal = new javax.swing.JButton();
        mainDesktopPane = new javax.swing.JDesktopPane();
        mainMenuBar = new javax.swing.JMenuBar();
        userMenuList = new javax.swing.JMenu();
        loginMenuItem = new javax.swing.JMenuItem();
        logoutMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        masterMenuList = new javax.swing.JMenu();
        userMenuItem = new javax.swing.JMenuItem();
        produkMenuItem = new javax.swing.JMenuItem();
        customerMenuItem = new javax.swing.JMenuItem();
        transaksiMenuList = new javax.swing.JMenu();
        addOrderMenuItem = new javax.swing.JMenuItem();
        jPembayaran = new javax.swing.JMenuItem();
        laporanMenuList = new javax.swing.JMenu();
        reportOmzetMenuItem = new javax.swing.JMenuItem();
        reportPenjualanMenuItem = new javax.swing.JMenuItem();
        reportPiutangMenuItem = new javax.swing.JMenuItem();
        reportProdukMenuItem = new javax.swing.JMenuItem();
        helpMenuList = new javax.swing.JMenu();

        //set login dialog frame icon
        try {
            Image img = ImageIO.read(getClass().getResource("/resources/book.png"));
            loginDialog.setIconImage(img);
        } catch (Exception ex) {
            logger.error("ERROR = " + ex.getMessage());
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel1.setText("Login System");

        jLabel2.setText("Username");

        jLabel3.setText("Password");

        username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameActionPerformed(evt);
            }
        });

        try{
            Image img = ImageIO.read(getClass().getResource("/resources/login.png"));
            buttonLogin.setIcon(new ImageIcon(img));
        }catch (Exception ex) {
            logger.error("ERROR = " + ex.getMessage());
        }
        buttonLogin.setMnemonic('L');
        buttonLogin.setText("Login");
        buttonLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoginActionPerformed(evt);
            }
        });

        buttonBatal.setText("batal");
        buttonBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBatalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(buttonLogin)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(buttonBatal))
                        .addComponent(username, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                        .addComponent(password, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonLogin)
                    .addComponent(buttonBatal))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout loginDialogLayout = new javax.swing.GroupLayout(loginDialog.getContentPane());
        loginDialog.getContentPane().setLayout(loginDialogLayout);
        loginDialogLayout.setHorizontalGroup(
            loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        loginDialogLayout.setVerticalGroup(
            loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pustaka");

        try{
            Image img = ImageIO.read(getClass().getResource("/resources/key.png"));
            userMenuList.setIcon(new ImageIcon(img));
        }catch (Exception ex) {
            logger.error("ERROR = " + ex.getMessage());
        }
        userMenuList.setMnemonic('u');
        userMenuList.setText("Login");

        try{
            Image img = ImageIO.read(getClass().getResource("/resources/login.png"));
            loginMenuItem.setIcon(new ImageIcon(img));
        }catch (Exception ex) {
            logger.error("ERROR = " + ex.getMessage());
        }
        loginMenuItem.setText("Login");
        loginMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginMenuItemActionPerformed(evt);
            }
        });
        userMenuList.add(loginMenuItem);

        try{
            Image img = ImageIO.read(getClass().getResource("/resources/logout.png"));
            logoutMenuItem.setIcon(new ImageIcon(img));
        }catch (Exception ex) {
            logger.error("ERROR = " + ex.getMessage());
        }
        logoutMenuItem.setText("Logout");
        logoutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutMenuItemActionPerformed(evt);
            }
        });
        userMenuList.add(logoutMenuItem);

        try{
            Image img = ImageIO.read(getClass().getResource("/resources/exit.png"));
            exitMenuItem.setIcon(new ImageIcon(img));
        }catch (Exception ex) {
            logger.error("ERROR = " + ex.getMessage());
        }
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        userMenuList.add(exitMenuItem);

        mainMenuBar.add(userMenuList);

        try{
            Image img = ImageIO.read(getClass().getResource("/resources/input_data.png"));
            masterMenuList.setIcon(new ImageIcon(img));
        }catch (Exception ex) {
            logger.error("ERROR = " + ex.getMessage());
        }
        masterMenuList.setMnemonic('m');
        masterMenuList.setText("Input Data");

        try{
            Image img = ImageIO.read(getClass().getResource("/resources/user.png"));
            userMenuItem.setIcon(new ImageIcon(img));
        }catch (Exception ex) {
            logger.error("ERROR = " + ex.getMessage());
        }
        userMenuItem.setText("Data User");
        userMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userMenuItemActionPerformed(evt);
            }
        });
        masterMenuList.add(userMenuItem);

        try{
            Image img = ImageIO.read(getClass().getResource("/resources/product.png"));
            produkMenuItem.setIcon(new ImageIcon(img));
        }catch (Exception ex) {
            logger.error("ERROR = " + ex.getMessage());
        }
        produkMenuItem.setText("Data Produksi");
        produkMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                produkMenuItemActionPerformed(evt);
            }
        });
        masterMenuList.add(produkMenuItem);

        try{
            Image img = ImageIO.read(getClass().getResource("/resources/customers.png"));
            customerMenuItem.setIcon(new ImageIcon(img));
        }catch (Exception ex) {
            logger.error("ERROR = " + ex.getMessage());
        }
        customerMenuItem.setText("Data Customer");
        customerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerMenuItemActionPerformed(evt);
            }
        });
        masterMenuList.add(customerMenuItem);

        mainMenuBar.add(masterMenuList);

        try{
            Image img = ImageIO.read(getClass().getResource("/resources/order.png"));
            transaksiMenuList.setIcon(new ImageIcon(img));
        }catch (Exception ex) {
            logger.error("ERROR = " + ex.getMessage());
        }
        transaksiMenuList.setMnemonic('t');
        transaksiMenuList.setText("Faktur");

        try{
            Image img = ImageIO.read(getClass().getResource("/resources/order.png"));
            addOrderMenuItem.setIcon(new ImageIcon(img));
        }catch (Exception ex) {
            logger.error("ERROR = " + ex.getMessage());
        }
        addOrderMenuItem.setText("Buat Faktur");
        addOrderMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrderMenuItemActionPerformed(evt);
            }
        });
        transaksiMenuList.add(addOrderMenuItem);

        try{
            Image img = ImageIO.read(getClass().getResource("/resources/money.png"));
            jPembayaran.setIcon(new ImageIcon(img));
        }catch (Exception ex) {
            logger.error("ERROR = " + ex.getMessage());
        }
        jPembayaran.setText("Pembayaran");
        jPembayaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPembayaranActionPerformed(evt);
            }
        });
        transaksiMenuList.add(jPembayaran);

        mainMenuBar.add(transaksiMenuList);

        try{
            Image img = ImageIO.read(getClass().getResource("/resources/report.png"));
            laporanMenuList.setIcon(new ImageIcon(img));
        }catch (Exception ex) {
            logger.error("ERROR = " + ex.getMessage());
        }
        laporanMenuList.setMnemonic('l');
        laporanMenuList.setText("Laporan");

        try{
            Image img = ImageIO.read(getClass().getResource("/resources/report_rekap.png"));
            reportOmzetMenuItem.setIcon(new ImageIcon(img));
        }catch (Exception ex) {
            logger.error("ERROR = " + ex.getMessage());
        }
        reportOmzetMenuItem.setText("Rekapitulasi");
        reportOmzetMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportOmzetMenuItemActionPerformed(evt);
            }
        });
        laporanMenuList.add(reportOmzetMenuItem);

        try{
            Image img = ImageIO.read(getClass().getResource("/resources/report_order.png"));
            reportPenjualanMenuItem.setIcon(new ImageIcon(img));
        }catch (Exception ex) {
            logger.error("ERROR = " + ex.getMessage());
        }
        reportPenjualanMenuItem.setText("Daftar Faktur");
        reportPenjualanMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportPenjualanMenuItemActionPerformed(evt);
            }
        });
        laporanMenuList.add(reportPenjualanMenuItem);

        try{
            Image img = ImageIO.read(getClass().getResource("/resources/report_pembayaran.png"));
            reportPiutangMenuItem.setIcon(new ImageIcon(img));
        }catch (Exception ex) {
            logger.error("ERROR = " + ex.getMessage());
        }
        reportPiutangMenuItem.setText("Pembayaran");
        reportPiutangMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportPiutangMenuItemActionPerformed(evt);
            }
        });
        laporanMenuList.add(reportPiutangMenuItem);

        try{
            Image img = ImageIO.read(getClass().getResource("/resources/report_produk.png"));
            reportProdukMenuItem.setIcon(new ImageIcon(img));
        }catch (Exception ex) {
            logger.error("ERROR = " + ex.getMessage());
        }
        reportProdukMenuItem.setText("Produk");
        reportProdukMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportProdukMenuItemActionPerformed(evt);
            }
        });
        laporanMenuList.add(reportProdukMenuItem);

        mainMenuBar.add(laporanMenuList);

        helpMenuList.setMnemonic('h');
        helpMenuList.setText("Help");
        mainMenuBar.add(helpMenuList);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainDesktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainDesktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameActionPerformed

    private void buttonLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoginActionPerformed
        // TODO add your handling code here:
        String userName = username.getText().trim();
        String passText = new String(password.getPassword());
        String md5Password = getMD5(passText);
        try{
            if(isValidUser(userName, md5Password)){
                setMenuDisplay(userInternal.getLevel());
                username.setText("");
                password.setText("");
                loginDialog.setVisible(Boolean.FALSE);
                UserSession us = new UserSession();
                us.setUsername(userName);
                us.setPassword(md5Password);
                this.setState(Frame.NORMAL);
            }else{
                JOptionPane.showMessageDialog(this, "Kesalahan login!");
                username.requestFocusInWindow();
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonLoginActionPerformed

    private void loginMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginMenuItemActionPerformed
        // TODO add your handling code here:
        loginDialog.setSize(280, 210);
        loginDialog.setVisible(true);
        loginDialog.setLocationRelativeTo(null);
    }//GEN-LAST:event_loginMenuItemActionPerformed

    private void buttonBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBatalActionPerformed
        if(this.getState() == Frame.ICONIFIED){
            System.exit(0);
        }else{
            loginDialog.setVisible(false);
        }
    }//GEN-LAST:event_buttonBatalActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void logoutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutMenuItemActionPerformed
        // TODO add your handling code here:
        setMenuLogout();
        UserSession us = null;
    }//GEN-LAST:event_logoutMenuItemActionPerformed

    private void produkMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_produkMenuItemActionPerformed
         // TODO add your handling code here:
        ProdukInternalFrame pif = ProdukInternalFrame.getInstance();
        pif.pack();
        if(pif.isVisible()){
            
        }else{
            mainDesktopPane.add(pif);
            pif.setVisible(true);
        }
    }//GEN-LAST:event_produkMenuItemActionPerformed

    
    private void customerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerMenuItemActionPerformed
        // TODO add your handling code here:
//        CustomerInternalFrame cif = new CustomerInternalFrame();
//        mainDesktopPane.add(cif);
//        cif.setVisible(true);
//        cif.setResizable(Boolean.TRUE);
        CustomerInternalFrame cif = CustomerInternalFrame.getInstance();
         cif.pack();
        if(cif.isVisible()){
            
        }else{
            mainDesktopPane.add(cif);
            cif.setVisible(true);
        }
    }//GEN-LAST:event_customerMenuItemActionPerformed

    private void userMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userMenuItemActionPerformed
        // TODO add your handling code here:
        //        UserInternalFrame uif = new UserInternalFrame();
        UserInternalFrame uif = UserInternalFrame.getInstance();
        uif.pack();
        if(uif.isVisible()){
            
        }else{
            mainDesktopPane.add(uif);
            uif.setVisible(true);
        }
    }//GEN-LAST:event_userMenuItemActionPerformed

    private void disableMenu(){
        masterMenuList.setEnabled(false);
        userMenuItem.setEnabled(false);
        transaksiMenuList.setEnabled(false);
        laporanMenuList.setEnabled(false);
    }
    private void addOrderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrderMenuItemActionPerformed
         // TODO add your handling code here:
//        AddOrderInternalFrame aoif = new AddOrderInternalFrame();
//        mainDesktopPane.add(aoif);
//        aoif.setVisible(true);
        AddOrderInternalFrame aoif = AddOrderInternalFrame.getInstance();
        aoif.pack();
        if(aoif.isVisible()){
            aoif.toFront();
        }else{
            mainDesktopPane.add(aoif);
            aoif.setVisible(true);
        }
    }//GEN-LAST:event_addOrderMenuItemActionPerformed

    private void reportOmzetMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportOmzetMenuItemActionPerformed
         // TODO add your handling code here:
//        ReportOmzet ro = new ReportOmzet();
//        mainDesktopPane.add(ro);
//        ro.setVisible(true);
        ReportOmzet ro = ReportOmzet.getInstance();
        ro.pack();
        if(ro.isVisible()){
            
        }else{
            mainDesktopPane.add(ro);
            ro.setVisible(true);
        }
    }//GEN-LAST:event_reportOmzetMenuItemActionPerformed

    private void reportPenjualanMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportPenjualanMenuItemActionPerformed
         // TODO add your handling code here:
//        ReportPenjualan rp = new ReportPenjualan();
//        mainDesktopPane.add(rp);
//        rp.setVisible(true);
        ReportPenjualan rp = ReportPenjualan.getInstance();
        rp.pack();
        if(rp.isVisible()){
            
        }else{
            mainDesktopPane.add(rp);
            rp.setVisible(true);
        }
    }//GEN-LAST:event_reportPenjualanMenuItemActionPerformed

    private void reportPiutangMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportPiutangMenuItemActionPerformed
         // TODO add your handling code here:
//        ReportPiutang rpu = new ReportPiutang();
//        mainDesktopPane.add(rpu);
//        rpu.setVisible(true);
        ReportPiutang rpu = ReportPiutang.getInstance();
        rpu.pack();
        if(rpu.isVisible()){
            
        }else{
            mainDesktopPane.add(rpu);
            rpu.setVisible(true);
        }
    }//GEN-LAST:event_reportPiutangMenuItemActionPerformed

    private void jPembayaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPembayaranActionPerformed
        PembayaranUi pem = PembayaranUi.getInstance();
        pem.pack();
        if(pem.isVisible()){
            
        }else{
            mainDesktopPane.add(pem);
            pem.setVisible(true);
        }
    }//GEN-LAST:event_jPembayaranActionPerformed

    private void reportProdukMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportProdukMenuItemActionPerformed
        // TODO add your handling code here
        ReportProduk rp = ReportProduk.getInstance();
        rp.pack();
        if(rp.isVisible()){
            
        }else{
            mainDesktopPane.add(rp);
            rp.setVisible(true);
        }
    }//GEN-LAST:event_reportProdukMenuItemActionPerformed

    private boolean isValidUser(String username, String password){
        try{
            ApplicationContext appContext = ApplicationContextProvider.getInstance().getApplicationContext();
            userInternalService = (UserInternalService) appContext.getBean("userInternalService");
            userInternal = userInternalService.findByUsernameAndPassword(username, password);
            if(userInternal != null){
                if(userInternal.getUsername().equals(username) && userInternal.getPassword().equals(password)){
                    return Boolean.TRUE;
                }else{
                    return Boolean.FALSE;
                }
            }else{
                return Boolean.FALSE;
            }
        }catch (Exception e){
            JOptionPane.showMessageDialog(this, "Error " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return false;
        }
    }
    
    public void setMenuLogout(){
        loginMenuItem.setEnabled(Boolean.TRUE);
        logoutMenuItem.setEnabled(Boolean.FALSE);
        masterMenuList.setEnabled(Boolean.FALSE);
        transaksiMenuList.setEnabled(Boolean.FALSE);
        laporanMenuList.setEnabled(Boolean.FALSE);
    }
    
    private void setMenuDisplay(String akses){
        if(akses.equals(UserInternal.USER)){
            loginMenuItem.setEnabled(Boolean.FALSE);
            logoutMenuItem.setEnabled(Boolean.TRUE);
            masterMenuList.setEnabled(Boolean.TRUE);
            userMenuItem.setEnabled(false);
            transaksiMenuList.setEnabled(Boolean.TRUE);
            laporanMenuList.setEnabled(Boolean.FALSE);
            this.setTitle("Selamat Datang User : " + userInternal.getNama());
        }else if(akses.equals(UserInternal.ADMIN)){
            loginMenuItem.setEnabled(Boolean.FALSE);
            logoutMenuItem.setEnabled(Boolean.TRUE);
            masterMenuList.setEnabled(Boolean.TRUE);
            userMenuItem.setEnabled(true);
            transaksiMenuList.setEnabled(Boolean.TRUE);
            laporanMenuList.setEnabled(Boolean.TRUE);
            this.setTitle("Selamat Datang Admin : " + userInternal.getNama());
        }
    }
    
    private String getMD5(String password){
        //convert the byte to hex format method 1
        StringBuilder sb = new StringBuilder();
        
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(password.getBytes());
            
            byte byteData[] = md.digest();
            
            for (int i = 0; i < byteData.length; i++) {
             sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
            }
            
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return sb.toString();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
                
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addOrderMenuItem;
    private javax.swing.JButton buttonBatal;
    private javax.swing.JButton buttonLogin;
    private javax.swing.JMenuItem customerMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu helpMenuList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuItem jPembayaran;
    private javax.swing.JMenu laporanMenuList;
    private javax.swing.JDialog loginDialog;
    private javax.swing.JMenuItem loginMenuItem;
    private javax.swing.JMenuItem logoutMenuItem;
    private javax.swing.JDesktopPane mainDesktopPane;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JMenu masterMenuList;
    private javax.swing.JPasswordField password;
    private javax.swing.JMenuItem produkMenuItem;
    private javax.swing.JMenuItem reportOmzetMenuItem;
    private javax.swing.JMenuItem reportPenjualanMenuItem;
    private javax.swing.JMenuItem reportPiutangMenuItem;
    private javax.swing.JMenuItem reportProdukMenuItem;
    private javax.swing.JMenu transaksiMenuList;
    private javax.swing.JMenuItem userMenuItem;
    private javax.swing.JMenu userMenuList;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables

    public UserInternal getUserInternal() {
        return userInternal;
    }

    public void setUserInternal(UserInternal userInternal) {
        this.userInternal = userInternal;
    }

    public UserInternalService getUserInternalService() {
        return userInternalService;
    }

    public void setUserInternalService(UserInternalService userInternalService) {
        this.userInternalService = userInternalService;
    }

    public static MainFrame getMyInstance() {
        return myInstance;
    }

    public static void setMyInstance(MainFrame myInstance) {
        MainFrame.myInstance = myInstance;
    }

}
