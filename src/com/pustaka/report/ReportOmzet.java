package com.pustaka.report;

import com.pustaka.common.ComboItem;
import com.pustaka.common.CommonConstant;
import com.pustaka.common.NumberFormat;
import com.pustaka.common.TableColumnAdjuster;
import com.pustaka.model.Customer;
import com.pustaka.model.Orders;
import com.pustaka.model.UserSession;
import com.pustaka.provider.ApplicationContextProvider;
import com.pustaka.service.CustomerService;
import com.pustaka.service.OrdersService;
import com.pustaka.vo.ReportOmzetVo;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import org.springframework.context.ApplicationContext;

/**
 *
 * @author dwi
 */
public class ReportOmzet extends javax.swing.JInternalFrame implements ItemListener {

    private CustomerService customerService;
    private OrdersService ordersService;
    private List<ReportOmzetVo> reportList = new ArrayList<ReportOmzetVo>();
    private List<Customer> customerList = new ArrayList<Customer>();
    private Long total;
    private SimpleDateFormat sdf = new SimpleDateFormat(CommonConstant.DATE_FORMAT);
    private static ReportOmzet myInstance;

    /**
     * Creates new form ReportOmzet
     */
    public ReportOmzet() {
        ApplicationContext appContext = ApplicationContextProvider.getInstance().getApplicationContext();
        ordersService = (OrdersService) appContext.getBean("ordersService");
        customerService = (CustomerService) appContext.getBean("customerService");
        initComponents();
        bulanCombobox();
//        bulanComboListener();
        radioButtonListener();
        allRadioButton.setSelected(true);
    }

    public static ReportOmzet getInstance() {
        if (myInstance == null) {
            myInstance = new ReportOmzet();
        }
        return myInstance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooseGroup = new javax.swing.ButtonGroup();
        jScrollPane2 = new javax.swing.JScrollPane();
        reportOmzetTable = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex)
            {
                return false; //Disallow the editing of any cell
            }
        };
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        totalTextField = new javax.swing.JTextField();
        closeButton = new javax.swing.JButton();
        tahunComboBox = new javax.swing.JComboBox();
        printButton = new javax.swing.JButton();
        allRadioButton = new javax.swing.JRadioButton();
        customerRadioButton = new javax.swing.JRadioButton();
        chooseComboBox = new javax.swing.JComboBox();
        searchButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ketTA = new javax.swing.JTextArea();
        addKet = new javax.swing.JButton();

        setClosable(true);
        setPreferredSize(new java.awt.Dimension(1000, 600));

        reportOmzetTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(reportOmzetTable);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Total");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Tahun");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Rekapitulasi");

        totalTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalTextField.setEnabled(false);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        tahunComboBox.setModel(new javax.swing.DefaultComboBoxModel());

        printButton.setText("Print");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        chooseGroup.add(allRadioButton);
        allRadioButton.setText("All");

        chooseGroup.add(customerRadioButton);
        customerRadioButton.setText("Customer");

        chooseComboBox.setModel(new javax.swing.DefaultComboBoxModel());
        chooseComboBox.setEnabled(false);

        searchButton.setText("Lihat");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Keterangan");

        ketTA.setColumns(20);
        ketTA.setRows(5);
        jScrollPane3.setViewportView(ketTA);

        addKet.setText("Add");
        addKet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addKetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(436, 436, 436))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(allRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(customerRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tahunComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(chooseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addKet)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                                .addComponent(jLabel6)
                                .addGap(48, 48, 48)
                                .addComponent(totalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 231, Short.MAX_VALUE)
                                .addComponent(printButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(closeButton)))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {closeButton, printButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(customerRadioButton)
                        .addComponent(allRadioButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(tahunComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchButton)
                    .addComponent(chooseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addKet)
                            .addComponent(jLabel6)
                            .addComponent(totalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(closeButton)
                            .addComponent(printButton))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        // TODO add your handling code here:
        try {
            ComboItem item = (ComboItem) tahunComboBox.getSelectedItem();
            Locale locale = new Locale("id", "ID");
            Map<String, Object> param = new HashMap<String, Object>();
            JasperReport jr = null;

            param.put("TAHUN", Integer.valueOf(item.getValue()));
            param.put(JRParameter.REPORT_LOCALE, locale);

            // save keterangan to customer
            for (ReportOmzetVo vo : reportList) {
                if (vo.getKeterangan() != null && !vo.getKeterangan().equals("")) {
                    Orders o = ordersService.findById(vo.getNoFaktur());
                    o.setKeterangan(vo.getKeterangan());
                    ordersService.update(o, UserSession.getUsername());
                }
            }

            if (!allRadioButton.isSelected()) {
                ComboItem itemCustomer = (ComboItem) chooseComboBox.getSelectedItem();
                param.put("ID_CUSTOMER", Integer.valueOf(itemCustomer.getValue()));
                InputStream jasperStream = getClass().getResourceAsStream("/Report/ReportRekapitulasiTransaksiCustomer.jasper");
                jr = (JasperReport) JRLoader.loadObject(jasperStream);
//                jr = JasperCompileManager.compileReport("D:\\Report\\ReportOmzetCustomer.jrxml");
            } else {
//                jr = JasperCompileManager.compileReport("D:\\Report\\ReportOmzet.jrxml");
                InputStream jasperStream = getClass().getResourceAsStream("/Report/ReportRekapitulasiTransaksi.jasper");
                jr = (JasperReport) JRLoader.loadObject(jasperStream);
            }

            JasperPrint print = JasperFillManager.fillReport(jr, param, ordersService.getConnection());
//            JasperViewer.viewReport(print, false);
            JasperPrintManager.printReport(print, true);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_printButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        if (!((ComboItem) tahunComboBox.getSelectedItem()).getValue().equals("0")) {
            ComboItem itemCustomer = (ComboItem) chooseComboBox.getSelectedItem();
            ComboItem itemCombo = (ComboItem) tahunComboBox.getSelectedItem();

            if (chooseComboBox.getSelectedItem() == null) {
                setDisplayOrderTableBasedAll(Integer.valueOf(itemCombo.getValue()));
            } else {
                setDisplayOrderTableBasedCustomer(Integer.valueOf(itemCustomer.getValue()), Integer.valueOf(itemCombo.getValue()));
            }
        } else {
            JOptionPane.showMessageDialog(this, "Bulan harus dipilih!", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void addKetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addKetActionPerformed
        // TODO add your handling code here:
        if (reportOmzetTable.getSelectedRow() != -1) {
            if (!ketTA.getText().equals("")) {
                reportOmzetTable.setValueAt(ketTA.getText(), reportOmzetTable.getSelectedRow(), 8);

                ReportOmzetVo vo = reportList.get(reportOmzetTable.getSelectedRow());
                vo.setKeterangan(ketTA.getText());
                Orders o = ordersService.findById(vo.getNoFaktur());
                o.setKeterangan(ketTA.getText());
                ordersService.update(o, UserSession.getUsername());
                reportList.set(reportOmzetTable.getSelectedRow(), vo);
                ketTA.setText("");
            } else {
                JOptionPane.showMessageDialog(this, "Keterangan tidak boleh kosong! ", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Pilih baris! ", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addKetActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addKet;
    private javax.swing.JRadioButton allRadioButton;
    private javax.swing.JComboBox chooseComboBox;
    private javax.swing.ButtonGroup chooseGroup;
    private javax.swing.JButton closeButton;
    private javax.swing.JRadioButton customerRadioButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea ketTA;
    private javax.swing.JButton printButton;
    private javax.swing.JTable reportOmzetTable;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox tahunComboBox;
    private javax.swing.JTextField totalTextField;
    // End of variables declaration//GEN-END:variables

    private void bulanCombobox() {
        int year = Calendar.getInstance().get(Calendar.YEAR);
        for (int i = 0; i < 5; i++) {
            tahunComboBox.addItem(new ComboItem(String.valueOf(year + i), String.valueOf(year + i)));
        }
    }

    private void radioButtonListener() {
//        bulanComboBox.addItemListener(new ItemChangeListener());
        customerRadioButton.addItemListener(this);
    }

    public void setDisplayOrderTableBasedAll(int month) {
        reportList = ordersService.getOrderByYearList(month);
        Object data[][] = new Object[reportList.size()][10];
        int x = 0;
        total = 0l;
        for (ReportOmzetVo vo : reportList) {
            data[x][0] = vo.getNoFaktur();
            data[x][1] = vo.getNamaCustomer();
            data[x][2] = NumberFormat.getInstance().formatNumber(vo.getBruto());
            data[x][3] = vo.getDiskon();
            data[x][4] = NumberFormat.getInstance().formatNumber(vo.getNetto());
            data[x][5] = vo.getTglBayar() != null ? sdf.format(vo.getTglBayar()) : "";
            data[x][6] = NumberFormat.getInstance().formatNumber(vo.getBayar());
            data[x][7] = NumberFormat.getInstance().formatNumber(vo.getSisa());
            data[x][8] = vo.getKeterangan();
            total = total + vo.getNetto();
            ++x;
        }
        totalTextField.setText(NumberFormat.getInstance().formatNumber(total));
        String[] judul = {"No Faktur", "Nama Customer", "Bruto", "Diskon", "Netto", "Tgl Bayar", "Bayar", "Sisa", "Keterangan"};
        reportOmzetTable.setModel(new DefaultTableModel(data, judul));

        DefaultTableCellRenderer subTotalRightRenderer = new DefaultTableCellRenderer();
        subTotalRightRenderer.setHorizontalAlignment(DefaultTableCellRenderer.RIGHT);
        DefaultTableCellRenderer dateCenterRenderer = new DefaultTableCellRenderer();
        dateCenterRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);

        reportOmzetTable.getColumn("Bruto").setCellRenderer(subTotalRightRenderer);
        reportOmzetTable.getColumn("Netto").setCellRenderer(subTotalRightRenderer);
        reportOmzetTable.getColumn("Bayar").setCellRenderer(subTotalRightRenderer);
        reportOmzetTable.getColumn("Sisa").setCellRenderer(subTotalRightRenderer);
        reportOmzetTable.getColumn("Diskon").setCellRenderer(dateCenterRenderer);
//        reportOmzetTable.getColumn("Keterangan").setCellRenderer(new MyCellRenderer());
        jScrollPane2.setViewportView(reportOmzetTable);
        reportOmzetTable.setEnabled(true);

        TableColumnAdjuster tca = new TableColumnAdjuster(reportOmzetTable);
        tca.adjustColumns();
    }

    public void setDisplayOrderTableBasedCustomer(int customer, int month) {
        reportList = ordersService.getCustomerOrderListForReportOmzet(customer, month);
        Object data[][] = new Object[reportList.size()][10];
        int x = 0;
        total = 0l;
        for (ReportOmzetVo vo : reportList) {
            data[x][0] = vo.getNoFaktur();
            data[x][1] = vo.getNamaCustomer();
            data[x][2] = NumberFormat.getInstance().formatNumber(vo.getBruto());
            data[x][3] = vo.getDiskon();
            data[x][4] = NumberFormat.getInstance().formatNumber(vo.getNetto());
            data[x][5] = vo.getTglBayar() != null ? sdf.format(vo.getTglBayar()) : "";
            data[x][6] = NumberFormat.getInstance().formatNumber(vo.getBayar());
            data[x][7] = NumberFormat.getInstance().formatNumber(vo.getSisa());
            data[x][8] = vo.getKeterangan();
            total = total + vo.getNetto();
            ++x;
        }
        totalTextField.setText(NumberFormat.getInstance().formatNumber(total));
        String[] judul = {"No Faktur", "Nama Customer", "Bruto", "Diskon", "Netto", "Tgl Bayar", "Bayar", "Sisa", "Keterangan"};
        reportOmzetTable.setModel(new DefaultTableModel(data, judul));

        DefaultTableCellRenderer subTotalRightRenderer = new DefaultTableCellRenderer();
        subTotalRightRenderer.setHorizontalAlignment(DefaultTableCellRenderer.RIGHT);
        DefaultTableCellRenderer dateCenterRenderer = new DefaultTableCellRenderer();
        dateCenterRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);

        reportOmzetTable.getColumn("Bruto").setCellRenderer(subTotalRightRenderer);
        reportOmzetTable.getColumn("Netto").setCellRenderer(subTotalRightRenderer);
        reportOmzetTable.getColumn("Bayar").setCellRenderer(subTotalRightRenderer);
        reportOmzetTable.getColumn("Sisa").setCellRenderer(subTotalRightRenderer);
        reportOmzetTable.getColumn("Diskon").setCellRenderer(dateCenterRenderer);
//        reportOmzetTable.getColumn("Keterangan").setCellRenderer(new MyCellRenderer());

        jScrollPane2.setViewportView(reportOmzetTable);
        reportOmzetTable.setEnabled(true);

        TableColumnAdjuster tca = new TableColumnAdjuster(reportOmzetTable);
        tca.adjustColumns();
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getStateChange() == ItemEvent.SELECTED) {
            setComboBasedCustomer();
            chooseComboBox.setEnabled(true);
        } else {
            chooseComboBox.removeAllItems();
            chooseComboBox.setEnabled(false);
        }
    }

    public OrdersService getOrdersService() {
        return ordersService;
    }

    public void setOrdersService(OrdersService ordersService) {
        this.ordersService = ordersService;
    }

    public List<ReportOmzetVo> getReportList() {
        return reportList;
    }

    public void setReportList(List<ReportOmzetVo> reportList) {
        this.reportList = reportList;
    }

    public Long getTotal() {
        return total;
    }

    public void setTotal(Long total) {
        this.total = total;
    }

    private String getMonthString(int month) {
        switch (month) {
            case 1:
                return "Januari";
            case 2:
                return "Februari";
            case 3:
                return "Maret";
            case 4:
                return "April";
            case 5:
                return "Mei";
            case 6:
                return "Juni";
            case 7:
                return "Juli";
            case 8:
                return "Agustus";
            case 9:
                return "September";
            case 10:
                return "Oktober";
            case 11:
                return "November";
            case 12:
                return "Desember";
            default:
                return "Invalid Month";
        }
    }

    private void setComboBasedCustomer() {
        customerList = customerService.getCustomerList();

        for (Customer cus : customerList) {
            chooseComboBox.addItem(new ComboItem(cus.getNama(), String.valueOf(cus.getCustomerId())));
        }
    }

    public CustomerService getCustomerService() {
        return customerService;
    }

    public void setCustomerService(CustomerService customerService) {
        this.customerService = customerService;
    }

    public List<Customer> getCustomerList() {
        return customerList;
    }

    public void setCustomerList(List<Customer> customerList) {
        this.customerList = customerList;
    }

    public static ReportOmzet getMyInstance() {
        return myInstance;
    }

    public static void setMyInstance(ReportOmzet myInstance) {
        ReportOmzet.myInstance = myInstance;
    }
}
